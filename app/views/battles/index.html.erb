<div id="app">
  <v-app>
    <v-system-bar>
        Battle Game
      <v-spacer></v-spacer>
      <% if user_signed_in? %>
        <%= current_user.user_name %>
        <%= link_to "ログアウト", destroy_user_session_path, method: :delete %>
      <% else %>
        Waiting Login...
      <% end %>
    </v-system-bar>

    <start-component
      v-show="active === 0"
      @next-screen="nextScreen"
    ></start-component>

    <wave-component
      v-show="active === 1"
      :wave="wave"
    ></wave-component>

    <battle-component
      ref="battle"
      v-show="active === 2"
    ></battle-component>



  </v-app>
</div>

<script src="https://cdn.jsdelivr.net/npm/vue@2.7.11/dist/vue.js"></script>
<script src="https://unpkg.com/vue-router@4.0.15/dist/vue-router.global.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vuetify@2.6.12/dist/vuetify.js"></script>
<script>

let startComponent = {
  template: `
    <div class="start-component">
      <v-btn
        class="text-h1"
        outlined
        height="auto"
        @click="nextScreen"
      >
        GAME START
      </v-btn>
    </div>
  `,
  data(){
    return{}
  },
  methods: {
    nextScreen(){
      this.$emit('next-screen');
    }
  }
}

let waveComponent = {
  template: `
    <div class="wave-component">
      <p class="text-h2">wave {{ wave }}</p>
    </div>
  `,
  data(){
    return{}
  },
  props: {
    wave: {
      type: Number,
    }
  }
}

let battleComponent = {
  template: `
    <div class="battle-component">
      <v-container>
        <v-row justify="center">
          <v-col cols=4 v-for="(enemy, i) in displayEnemies" :key="enemy.name">
            <v-card
              @click="calcDamage(i)"
              :disabled="displayEnemies[i].hp <= 0"
            >
              <p v-text="enemy.name"></p>
              <p>HP: {{ enemy.hp }}</p>
            </v-card>
            <v-card 
              class="d-flex justify-center"
              :disabled="displayEnemies[i].hp <= 0"
            >
              <img :src="enemy.img" width="200px">
            </v-card>
          </v-col>
        </v-row>
        <v-row>
          <v-col cols="9">
            <v-card>
              <v-card-text>
                <p>マサの攻撃 => ギャル男には効かなかった！</p>
              </v-card-text>
            </v-card>
          </v-col>
          <v-col>
            <v-card>
              <v-card-text>
                <p>たたかう</p>
                <p>まほう</p>
                <p>まもる</p>
                <p>にげる</p>
              </v-card-text>
            </v-card>
          </v-col>
        </v-row>
      </v-container>
      <v-card class="clear-modal" v-show="clear">
        <v-card-title>
          クリア!
        </v-card-title>
      </v-card>
    </div>
  `,
  data(){
    return{
      clear: false,
      displayEnemies: [
        {
          id: 0,
          name: "",
          hp: 0,
          img: "",
          down: false
        },
        {
          id: 0,
          name: "",
          hp: 0,
          img: "",
          down: false
        },
        {
          id: 0,
          name: "",
          hp: 0,
          img: "",
          down: false
        },
      ],
      enemies: [
        {
          id: 0,
          name: "ギャル男",
          hp: 10,
          img: "/gal_o_man.png"
        },
        {
          id: 1,
          name: "ヤンキー",
          hp: 20,
          img: "mild_yankee_dqn.png"
        },
        {
          id: 2,
          name: "オタク",
          hp: 8,
          img: "otaku_winter.png"
        }
      ],
      enemyGroups: [
        [1, 2, 3],
        [1, 2, 3],
        [1, 1, 2]
      ]
    }
  },
  methods: {
    calcDamage(i) {
      this.displayEnemies[i].hp -= 1;
      if (this.displayEnemies[i].hp <= 0) {
        if (this.displayEnemies[0].hp <= 0 && this.displayEnemies[1].hp <= 0 && this.displayEnemies[2].hp <= 0) {
          console.log("クリア");
          this.clear = true;
        }
      }
    },
    checkClear() {
      console.log("発火");
    }
  },
  mounted: function() {
    this.displayEnemies = this.enemies.map( enemy => ({...enemy}))
  }
}

let app = new Vue({
  el: '#app',
  vuetify: new Vuetify(),
  data(){
    return{
      active: 0,
      wave: 0,
    }
  },
  components: {
    startComponent,
    waveComponent,
    battleComponent
  },
  methods: {
    nextScreen() {
      this.wave += 1;
      this.active = 1;
      setInterval(() => {
        this.active = 2;
      }, 2000);
    }
  }
})
 
</script>